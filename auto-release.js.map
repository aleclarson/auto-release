{"version":3,"sources":["webpack:///./docs/pages/auto-release.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","_ref6","_ref7","id","currentPage","aria-hidden","_ref8","_ref9"],"mappings":"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","file":"auto-release.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto-release/','pages/auto-release.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1><code>auto release</code></h1>\n<p>Auto-generate a github release.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"postpublish\"</span>: <span className=\"hljs-string\">\"auto release\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<p>Make sure the branch/tag you're releasing is on github before running <code>auto release</code>.\nYou will need to push the tags to github first:</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"postpublish\"</span>: <span className=\"hljs-string\">\"git push --follow-tags --set-upstream origin $branch &amp;&amp; auto release\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h2 id=\"options\">Options <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#options\" aria-hidden=\"true\"></Link></h2>\n<pre><code className=\"language-bash\">&gt;  auto release -h<br /><br />usage: auto release [-h] [-s SLACK] [--use-version USE_VERSION]<br />                       [--jira JIRA] [--no-version-prefix] [-d] [-v] [-vv]<br />                       [--githubApi GITHUBAPI] [--name NAME] [--email EMAIL]<br /><br /><br />Optional arguments:<br />  -h, --<span className=\"hljs-built_in\">help</span>            Show this <span className=\"hljs-built_in\">help</span> message and <span className=\"hljs-built_in\">exit</span>.<br />  -s SLACK, --slack SLACK<br />                        Post a message to slack about the release. Make sure<br />                        the SLACK_TOKEN environment variable is <span className=\"hljs-built_in\">set</span>.<br />  --use-version USE_VERSION<br />                        Version number to publish as. Defaults to reading<br />                        from the package.json.<br />  --jira JIRA           Jira base URL<br />  --no-version-prefix   Use the version as the tag without the &#96;v&#96; prefix<br />  -d, --dry-run         Dont actually commit status. Just <span className=\"hljs-built_in\">print</span> the request<br />                        body<br />  -v, --verbose         Show some more logs<br />  -vv, --very-verbose   Show a lot more logs<br />  --githubApi GITHUBAPI<br />                        Github API to use<br />  --name NAME           Git name to commit and release with. Defaults to<br />                        package.json<br />  --email EMAIL         Git email to commit with. Defaults to package.json<br /></code></pre>\n<h2 id=\"slack-url\">Slack URL <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#slack-url\" aria-hidden=\"true\"></Link></h2>\n<p>When posting to slack you must provide your slack services hook url at the CLI or in your <code>.autorc</code> config. To see configuration <Link currentPage={(this && this.props || props).currentPage} to=\"/auto-release/pages/autorc.html#slack-url\">go here</Link>.</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}