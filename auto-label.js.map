{"version":3,"sources":["webpack:///./docs/pages/auto-label.md"],"names":["_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","props","shouldLoad","then","c","setState","default","render","createElement","children","e","bind","_jsx","className","_ref3"],"mappings":"2JAEMA,EAAAC,EAAA,UACAC,ySAAAC,CAAAF,EAAA,IACAD,EAAAC,EAAA,IAgGFD,EAAAC,EAAA,6lBA+CF,MAAMG,EAAgBC,IAAQ,IAAAC,EAAAC,EAAA,OAAAA,EAAAD,EAC5B,cAAcE,UAAMC,UAAUC,eAAAC,GAAAC,SAAAD,GAAAE,EAAAC,KAAA,QAKpB,CACNC,KAAM,OAGRC,qBACOF,KAAKG,MAAMF,MAAQD,KAAKI,MAAMC,YACjCd,IAAWe,KAAKC,IACdP,KAAKQ,SAAS,CACZP,KAAMM,EAAEE,YAMhBC,SACE,MAAMT,KAAEA,GAASD,KAAKG,MACtB,OAAOF,EAAOP,UAAMiB,cAAcV,EAAMD,KAAKI,MAAOJ,KAAKI,MAAMQ,UAAY,MAAQ,OAtB3Db,EAAAP,EAAA,eAEJ,CACpBa,YAAY,IAHYZ,GA2BbH,EAAc,IAAMH,EAAA0B,EAAA,IAAAP,KAAAnB,EAAA2B,KAAA,WACdxB,EAAc,IAAMH,EAAA0B,EAAA,IAAAP,KAAAnB,EAAA2B,KAAA,iBAKrCC,EAAA,oBACEA,EAAA,eAAIA,EAAA,gCACdA,EAAA,qJACAA,EAAA,gBAAKA,EAAA,QAAMC,UAAU,sBAAhB,qBAAmDD,EAAA,SAAMA,EAAA,SAAzD,UAAsEA,EAAA,SAAMA,EAAA,SAA5E,4EAA2JA,EAAA,SAAMA,EAAA,SAAjK,iBAAqLA,EAAA,SAAMA,EAAA,SAA3L,WAAyMA,EAAA,QAAMC,UAAU,sBAAhB,UAAzM,2BAA4QD,EAAA,QAAMC,UAAU,sBAAhB,UAA5Q,WAA+TD,EAAA,QAAMC,UAAU,qBAAhB,SAA/T,QAA6WD,EAAA,QAAMC,UAAU,sBAAhB,aAA8CD,EAAA,SAA3Z,8CAA4cA,EAAA,SAA5c,+CAA8fA,EAAA,SAA9f,uCAAwiBA,EAAA,QAAMC,UAAU,sBAAhB,SAAxiB,uCAAsnBD,EAAA,QAAMC,UAAU,qBAAhB,QAAtnB,oBAA+qBD,EAAA,SAA/qB,kGAAoxBA,EAAA,SAApxB,4CAAm0BA,EAAA,SAAMA,EAAA,SAAz0B,WAAu1BA,EAAA,SAAMA,EAAA,SAA71B,0BAA03BA,EAAA,kBALt2BX,GACnBW,EAAA,OAAKC,UAAWZ,EAAMY,gBAAtB,EAAAC","file":"auto-label.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto-release/','pages/auto-label.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1><code>auto label</code></h1>\n<p>Get the labels for a pull request. Doesn't do much, but the return value lets you write you own scripts based off of the PR labels!</p>\n<pre><code className=\"language-bash\">&gt;  auto label -h<br /><br />Options<br /><br />  --pr number [required]   The pull request number you want the labels of<br /><br />Global Options<br /><br />  -h, --<span className=\"hljs-built_in\">help</span>            Display the <span className=\"hljs-built_in\">help</span> output <span className=\"hljs-keyword\">for</span> the <span className=\"hljs-built_in\">command</span><br />  -v, --verbose         Show some more logs<br />  -w, --very-verbose    Show a lot more logs<br />  --repo string         The repo to <span className=\"hljs-built_in\">set</span> the status on. Defaults to looking <span className=\"hljs-keyword\">in</span> the package.json<br />  --owner string        Version number to publish as. Defaults to reading from the package.json<br />  --githubApi string    Github API to use<br /><br />Examples<br /><br />  $ auto label --pr 123<br /></code></pre>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}