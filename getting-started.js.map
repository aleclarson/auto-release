{"version":3,"sources":["webpack:///./docs/pages/getting-started.md"],"names":["_path","_interopRequireDefault","__webpack_require__","_react","_interopRequireWildcard","Link","props","to","rest","_objectWithoutProperties","includes","default","createElement","_extends","href","path","join","onClick","e","preventDefault","location","URL","window","origin","history","pushState","Location","pathname","hash","query","getLocation","popStateEvent","CustomEvent","detail","dispatchEvent","defaultProps","lazyComponent","provider","_class","_temp","React","Component","[object Object]","args","super","_defineProperty","this","Comp","componentDidMount","state","shouldLoad","then","c","setState","render","children","bind","_jsx","className","_ref3","_ref4","_ref5","id","currentPage","aria-hidden","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26"],"mappings":"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","file":"getting-started.js","sourcesContent":["\n      \n      import path from 'path';\n      import React, { Component } from 'react';\n      import makeClass from 'classnames';\n\n      \n  import PropTypes from 'prop-types';\n\n  const getLocation = Location => ({\n    href: Location.href,\n    pathname: Location.pathname,\n    hash: Location.hash,\n    query: Location.query\n  });\n\n  const Link = props => {\n    let {to, ...rest} = props;\n\n    if (to.includes('http')) {\n      return <a {...props} href={to} />\n    }\n\n    if (to[0] === '#') {\n      to = path.join('/auto-release/','pages/getting-started.html') + to;\n    }\n\n    return (\n      <a\n        {...rest}\n        href={to}\n        onClick={e => {\n          e.preventDefault();\n\n          if (props.to === '#') {\n            return false;\n          }\n\n          const location = new URL(path.join(window.location.origin, to))\n\n          window.history.pushState(getLocation(location), null, to);\n          props.onClick();\n\n          const popStateEvent = new CustomEvent('changeLocation', { detail: location });\n          dispatchEvent(popStateEvent);\n\n          return false;\n        }}\n      />\n    );\n  };\n\n  Link.defaultProps = {\n    href: '',\n    onClick: () => {}\n  };\n\n  Link.propTypes = {\n    href: PropTypes.string,\n    onClick: PropTypes.func\n  }\n\n      \n  const PluginProvider = ({plugins, name, options, children, ...props}) => {\n    let Plugin = plugins[name];\n    const pluginOptions = Plugin.options;\n\n    if (!Plugin) {\n      return <div />;\n    }\n\n    Plugin = Plugin.component;\n    return (\n      <Plugin\n        {...pluginOptions} \n        options={options ? options.options : {}}\n        {...(options ? options.props : props)}\n        children={children}\n        plugins={plugins}\n      />\n    );\n  };\n\n      \n  class Details extends Component {\n    state = {\n      open: this.props.open\n    }\n\n    render() {\n      return (\n        <details open={this.state.open}>\n          {this.props.children}\n        </details>\n      )\n    }\n  };\n\n      \n      \n    import IdealImage from 'react-ideal-image';\n\n    const imageSources = {  };\n\n    class LazyImageComponent extends React.Component {\n      state = {\n        image: null,\n        ImageProvider: imageSources[this.props.src]\n      }\n\n      componentDidMount() {\n        if (!this.state.image) {\n          this.state.ImageProvider().then(c => {\n            this.setState({\n              image: c.default\n            });\n          });\n        }\n      }\n\n      render() {\n        let { image } = this.state;\n\n        return image && typeof image === 'object' ? (\n          <IdealImage\n            {...this.props}\n            className={makeClass('image', this.props.className)}\n            src={image.src.src}\n            width={image.src.width || image.width}\n            height={image.src.height || image.height}\n            placeholder={{ lqip: image.preSrc }}\n            srcSet={image.src.images\n              ? image.src.images.map(i => ({\n                  ...i,\n                  src: i.path\n                }))\n              : [{\n                  src: image.src,\n                  width: image.width\n                }]\n            }\n          />\n        ) : <img className={makeClass('image', this.props.className)} src={image} />;\n      }\n    }\n  \n      \n  const lazyComponent = provider =>\n    class extends React.Component {\n      static defaultProps = {\n        shouldLoad: true\n      };\n  \n      state = {\n        Comp: null\n      };\n  \n      componentDidMount() {\n        if (!this.state.Comp && this.props.shouldLoad) {\n          provider().then(c => {\n            this.setState({\n              Comp: c.default\n            });\n          });\n        }\n      }\n  \n      render() {\n        const { Comp } = this.state;\n        return Comp ? React.createElement(Comp, this.props, this.props.children || null) : null;\n      }\n    };\n\n\n      const Gist = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-gist'))\n      const TweetEmbed = lazyComponent(() => import(/* webpackChunkName: \"plugin-embed\" */ 'react-tweet-embed'))\n    \n      \n    const markDownPage = props => (\n      <div className={props.className}>\n        <section>\n          <h1>Getting Started</h1>\n<p>Before we do anything we must first install <code>auto-release-cli</code> as a dev dependency.</p>\n<pre><code className=\"language-sh\">yarn add -D auto-release-cli<br /></code></pre>\n<h2 id=\"configuration\">Configuration <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#configuration\" aria-hidden=\"true\"></Link></h2>\n<p>To quickly configure most options run <code>auto init</code>.</p>\n<p>If you do this you still must configure the environment variables and add the labels to your project. <code>auto init</code> cannot automate these steps.</p>\n<h3 id=\"environment-variables\">Environment Variables <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#environment-variables\" aria-hidden=\"true\"></Link></h3>\n<p>You must configure some environment variables for publishing and releasing.</p>\n<ul>\n<li><code>GH_TOKEN</code> - Used for updating the changelog and publishing the GitHub release</li>\n<li><code>NPM_TOKEN</code> - Used to publish to npm.</li>\n</ul>\n<p>If you are publishing from the CI you must inject the <code>NPM_TOKEN</code> into your <code>.npmrc</code>.</p>\n<pre><code className=\"language-sh\"><span className=\"hljs-built_in\">echo</span> <span className=\"hljs-string\">\"//registry.npmjs.org/:_authToken=<span className=\"hljs-variable\">$NPM_TOKEN</span>\"</span> &gt;&gt; ~/.npmrc<br /></code></pre>\n<h3 id=\"labels\">Labels <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#labels\" aria-hidden=\"true\"></Link></h3>\n<p>After that, set up the labels on your github project. The following labels are the defaults. To change them refer to <Link currentPage={(this && this.props || props).currentPage} to=\"/auto-release/pages/autorc.html#versioning-labels\">this</Link>.</p>\n<h4 id=\"versioning-labels%3A\">Versioning Labels: <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#versioning-labels%3A\" aria-hidden=\"true\"></Link></h4>\n<ul>\n<li><code>major</code> - create a major release</li>\n<li><code>minor</code> - create a minor release</li>\n<li><code>patch</code> - create a patch release</li>\n<li><code>no-release</code> - do not create a release</li>\n<li><code>release</code> (optional) - only used with <code>onlyPublishWithReleaseLabel</code></li>\n<li><code>prerelease</code> (optional) - create pre release</li>\n</ul>\n<h4 id=\"changelog-labels\">Changelog Labels <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#changelog-labels\" aria-hidden=\"true\"></Link></h4>\n<p>These labels do not effect the version calculation but they will change the section the PR displays in the changelog. These are customizable too, and you can even add your own sections. Read more <Link currentPage={(this && this.props || props).currentPage} to=\"/auto-release/pages/autorc.html#changelog-titles\">here</Link></p>\n<ul>\n<li><code>internal</code> - the changes do not effect the code and is more about tooling</li>\n<li><code>documentation</code> - the changes effect the documentation</li>\n</ul>\n<h2 id=\"quick-setup\">Quick Setup <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#quick-setup\" aria-hidden=\"true\"></Link></h2>\n<p>To version, changelog, publish and release your code all at the same time, we've included the <code>shipit</code> tool. This tool takes the default <code>auto</code> workflow and puts it into one command.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"release\"</span>: <span className=\"hljs-string\">\"auto shipit\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h2 id=\"detailed-setup\">Detailed Setup <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#detailed-setup\" aria-hidden=\"true\"></Link></h2>\n<p>The simplest workflow to get set up in just the <code>package.json</code> is by adding the following to your <code>package.json</code>. With this setup your application will not be able to use the <code>no-release</code> flag, but everything else will work just fine</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"version\"</span>: <span className=\"hljs-string\">\"npm version &#96;auto version&#96; -m 'Bump version to: %s [skip ci]'\"</span>,<br />    <span className=\"hljs-attr\">\"publish\"</span>: <span className=\"hljs-string\">\"npm publish &amp;&amp; git push --follow-tags --set-upstream origin $branch\"</span>,<br />    <span className=\"hljs-attr\">\"release\"</span>: <span className=\"hljs-string\">\"auto changelog &amp;&amp; npm run version &amp;&amp; npm run publish &amp;&amp; auto release\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<h3 id=\"enabling-no-release-label\">Enabling <code>no-release</code> label <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#enabling-no-release-label\" aria-hidden=\"true\"></Link></h3>\n<p>To use the <code>no-release</code> label you have to get a little more involved and use a shell script. We could do the <code>if</code> checks in the <code>package.json</code>, but this would get messy and hard to read very quickly.</p>\n<pre><code className=\"language-json\">&#123;<br />  <span className=\"hljs-attr\">\"scripts\"</span>: &#123;<br />    <span className=\"hljs-attr\">\"release\"</span>: <span className=\"hljs-string\">\"./scripts/release.sh\"</span><br />  &#125;<br />&#125;<br /></code></pre>\n<p>Here is an example release script for a single NPM package:</p>\n<pre><code className=\"language-sh\"><span className=\"hljs-built_in\">export</span> PATH=$(npm bin):<span className=\"hljs-variable\">$PATH</span><br /><br />VERSION=&#96;auto version&#96;<br /><br /><span className=\"hljs-comment\">## Support for label 'no-release'</span><br /><span className=\"hljs-keyword\">if</span> [ ! -z <span className=\"hljs-string\">\"<span className=\"hljs-variable\">$VERSION</span>\"</span> ]; <span className=\"hljs-keyword\">then</span><br />  <span className=\"hljs-comment\">## Update Changelog</span><br />  auto changelog<br /><br />  <span className=\"hljs-comment\">## Publish Package</span><br />  npm version <span className=\"hljs-variable\">$VERSION</span> -m <span className=\"hljs-string\">\"Bump version to: %s [skip ci]\"</span><br />  npm publish<br /><br />  <span className=\"hljs-comment\">## Create GitHub Release</span><br />  git push --follow-tags --<span className=\"hljs-built_in\">set</span>-upstream origin <span className=\"hljs-variable\">$branch</span><br />  auto release<br /><span className=\"hljs-keyword\">fi</span><br /></code></pre>\n<p>or if you are using lerna to manage a monorepo.</p>\n<pre><code className=\"language-sh\"><span className=\"hljs-built_in\">export</span> PATH=$(npm bin):<span className=\"hljs-variable\">$PATH</span><br /><br />VERSION=&#96;auto version&#96;<br /><br /><span className=\"hljs-keyword\">if</span> [ ! -z <span className=\"hljs-string\">\"<span className=\"hljs-variable\">$VERSION</span>\"</span> ]; <span className=\"hljs-keyword\">then</span><br />  auto changelog<br />  lerna publish --yes --force-publish=* <span className=\"hljs-variable\">$VERSION</span> -m <span className=\"hljs-string\">'%v [skip ci]'</span><br />  auto release<br /><span className=\"hljs-keyword\">fi</span><br /></code></pre>\n<h2 id=\"enterprise\">Enterprise <Link currentPage={(this && this.props || props).currentPage} className=\"fas fa-hashtag headerLink\" to=\"#enterprise\" aria-hidden=\"true\"></Link></h2>\n<p>If you are using enterprise github <code>auto-release</code> lets you configure the github API URL that it uses. You can configure this by using the CLI option <code>--githubApi</code> or by setting the value in your <Link currentPage={(this && this.props || props).currentPage} to=\"/auto-release/pages/autorc.html#githubApi\">.autorc</Link>.</p>\n\n        </section>\n      </div>\n    );\n\n    export default markDownPage;\n  \n    "],"sourceRoot":""}